{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to DevOps Course Nov 23","title":"Home"},{"location":"#welcome-to-devops-course-nov-23","text":"","title":"Welcome to DevOps Course Nov 23"},{"location":"linux_ex1/","text":"Linux ex-1 Due date: 30/12/23 23:59 Preliminaries Make sure your Pycharm terminal is configured to run Git Bash (not Powershell) Open (or clone if you didn't do it yet) our shared git repo in PyCharm and pull the repository to get an up-to-date version From Pycharm button right bar, create your own git branch (Git branches will be discussed later): Then change <alias> to your nickname. e.g. linux_ex1/ronhd . The branch name must start with linux_ex1/ Submission At the end of this exercise, under 02_linux_ex1 directory, you should commit and push only 2 files as your solution: README file with your email at the first line, your generated secret (see last question below), and open answers for the first two questions below, as following: name@example.com < your secret here > Kernel System Calls ------------------- < Your Answer > Binary Numbers -------------- < Your Answer > Your bash script solution in yourSolution.sh file (see last question below) mkdir blabla touch blabla ... rm blabla ... Questions Kernel System Calls (20 Points) We've discussed in class about the Linux kernel - the main component of a Linux OS which functions as the core interface between a computer\u2019s hardware and its processes. But how does it work exactly? what exact commands (or system calls ) do we pass to the kernel from programs such as ls or chmod (or any other program)? The goal of this question is to help you become familiar with the strace command. strace is a Linux command, which traces system calls and signals of a program. It is an important tool to debug your programs in advanced cases. In this assignment, you should follow the strace of a program in order to understand what it does. You can assume that the program does only what you can see by using strace. To run the program, do the following: Open a linux terminal in an empty directory and perform: you can download the whatido file from here: whatido https://github.com/ronhadad22/DevOpsNov23/tree/main/02_linux_ex1 chmod 700 ./whatIdo The wget command is able to retrieve data from the internet. Run the program using strace . Follow strace output. Tip: many lines in the beginning are part of the load of the program. The first \u201cinteresting\u201d lines comes only at the end of the output Your assignment is to supply a brief description of what the program does in the README file Binary Numbers (20 Points) Convert the following binary numbers to a decimals: 111, 100, 10110 What is the available decimal range represented by a 8 bits binary number? Given a 9 bits binary number, suggest a method to represent a negative numbers between 0-255 Suggest a method to represent a floating point numbers (e.g. 12.3, 15.67, 0.231) using a 8 bits binary numbers File System Manipulations (60 points) download from here the secretGenerator.tar.gz: https://github.com/ronhadad22/DevOpsNov23/tree/main/02_linux_ex1 Use tar to extract the compressed file. cd to src directory. Explore the files and their content. Your goal is to generate a secret. The secret can be generated using /bin/bash generateSecret.sh . Once you've generated it, copy it to the designated place in the README file (33 characters). Use nano or your preferred text editor, and write a complete commands set that let you to generate the secret in yourSolution.sh file (single command in each line). At the end, given a clean version of src directory (without the changes you've made) you should be able to run /bin/bash yourSolution.sh and the secret should be generated without any errors. Copy the content of yourSolution.sh into the same file in the Git repo ( 02_linux_ex1/yourSolution.sh ). Commit ONLY 02_linux_ex1/README and 02_linux_ex1/yourSolution.sh files ONLY . by: Push your changes, and wait for results :-) Good Luck Don't hesitate to ask any questions","title":"Linux Ex1"},{"location":"linux_ex1/#linux-ex-1","text":"Due date: 30/12/23 23:59","title":"Linux ex-1"},{"location":"linux_ex1/#preliminaries","text":"Make sure your Pycharm terminal is configured to run Git Bash (not Powershell) Open (or clone if you didn't do it yet) our shared git repo in PyCharm and pull the repository to get an up-to-date version From Pycharm button right bar, create your own git branch (Git branches will be discussed later): Then change <alias> to your nickname. e.g. linux_ex1/ronhd . The branch name must start with linux_ex1/","title":"Preliminaries"},{"location":"linux_ex1/#submission","text":"At the end of this exercise, under 02_linux_ex1 directory, you should commit and push only 2 files as your solution: README file with your email at the first line, your generated secret (see last question below), and open answers for the first two questions below, as following: name@example.com < your secret here > Kernel System Calls ------------------- < Your Answer > Binary Numbers -------------- < Your Answer > Your bash script solution in yourSolution.sh file (see last question below) mkdir blabla touch blabla ... rm blabla ...","title":"Submission"},{"location":"linux_ex1/#questions","text":"","title":"Questions"},{"location":"linux_ex1/#kernel-system-calls","text":"(20 Points) We've discussed in class about the Linux kernel - the main component of a Linux OS which functions as the core interface between a computer\u2019s hardware and its processes. But how does it work exactly? what exact commands (or system calls ) do we pass to the kernel from programs such as ls or chmod (or any other program)? The goal of this question is to help you become familiar with the strace command. strace is a Linux command, which traces system calls and signals of a program. It is an important tool to debug your programs in advanced cases. In this assignment, you should follow the strace of a program in order to understand what it does. You can assume that the program does only what you can see by using strace. To run the program, do the following: Open a linux terminal in an empty directory and perform: you can download the whatido file from here: whatido https://github.com/ronhadad22/DevOpsNov23/tree/main/02_linux_ex1 chmod 700 ./whatIdo The wget command is able to retrieve data from the internet. Run the program using strace . Follow strace output. Tip: many lines in the beginning are part of the load of the program. The first \u201cinteresting\u201d lines comes only at the end of the output Your assignment is to supply a brief description of what the program does in the README file","title":"Kernel System Calls"},{"location":"linux_ex1/#binary-numbers","text":"(20 Points) Convert the following binary numbers to a decimals: 111, 100, 10110 What is the available decimal range represented by a 8 bits binary number? Given a 9 bits binary number, suggest a method to represent a negative numbers between 0-255 Suggest a method to represent a floating point numbers (e.g. 12.3, 15.67, 0.231) using a 8 bits binary numbers","title":"Binary Numbers"},{"location":"linux_ex1/#file-system-manipulations","text":"(60 points) download from here the secretGenerator.tar.gz: https://github.com/ronhadad22/DevOpsNov23/tree/main/02_linux_ex1 Use tar to extract the compressed file. cd to src directory. Explore the files and their content. Your goal is to generate a secret. The secret can be generated using /bin/bash generateSecret.sh . Once you've generated it, copy it to the designated place in the README file (33 characters). Use nano or your preferred text editor, and write a complete commands set that let you to generate the secret in yourSolution.sh file (single command in each line). At the end, given a clean version of src directory (without the changes you've made) you should be able to run /bin/bash yourSolution.sh and the secret should be generated without any errors. Copy the content of yourSolution.sh into the same file in the Git repo ( 02_linux_ex1/yourSolution.sh ). Commit ONLY 02_linux_ex1/README and 02_linux_ex1/yourSolution.sh files ONLY . by: Push your changes, and wait for results :-)","title":"File System Manipulations"},{"location":"linux_ex1/#good-luck","text":"Don't hesitate to ask any questions","title":"Good Luck"},{"location":"linux_ex2/","text":"Linux ex-2 Due date: 30/11/2022 23:59 Max possible points: 135 points Preliminaries Open our shared git repo in PyCharm and pull the repository in branch main to get an up-to-date version Create your own git branch for this exercise according to linux_ex2/< alias > (e.g. linux_ex2/ronhad). Questions TLS communication 90 points As you know, the communication in HTTP protocol is insecure, and since Eve is listening on the channel between you (Alice) and the web server (Bob), you are required to create a secure channel. This is exactly what SSL/TLS does. The process of establishing a secure SSL/TLS connection involves several steps. SSL/TLS security protocols use a combination of asymmetric and symmetric encryption: Step 1 - Client Hello (Client -> Server). First, the client sends a Client Hello to the server. Step 2 - Server Hello (Server -> Client) The server replies with a Server Hello . A Server Hello includes the following information: Server Version - the TLS version the server uses Session ID - it is used to resume the current communication session between the server and the client Server digital certificate - the certificate contains some details about the server, as well as a public key with which the client can encrypt messages to the server. The certificate itself is signed by Certificate Authority (CA). Step 3 - Server Certificate Verification As seen above, Eve is \"sitting\" on the channel between Alice and Bob. So what's stopping her from impersonating Bob, and once Alice sends Client Hello , she is replied by a fake Server Hello message with \"certificate\" issued by Eve itself. In such case, Alice would believe that the certificate belongs to Bob, encrypt messages to Bob using the certificate, without knowing that Eve could decrypt the messages. Here the CA comes into the picture. CA is an entity (e.g. Amazon Web Services, Microsoft etc...) trusted by both sides (client and server) that issues and signs digital certificates, so the ownership of a public key can be easily verified. In this step the client verifies the server's digital certificate. Step 4 - Client-Server master-key exchange Cert was verified successfully? great we can move on... Now, the client and the server should agree on a symmetric key (called master key ) with which they will communicate during the session. The client generates a 32-bytes random master-key, encrypts it using the server's certificate and sends the encrypted message in the channel. In addition to the encrypted master-key, the client sends a sample message to verify that the symmetric key encryption works. Step 5 - Server verification message The server decrypts the encrypted master-key. From now on, every message between both sides will be symmetrically encrypted by the master-key. The server encrypts the sample message and sends it to the client. Step 6 - Client verification message The Client verifies that the sample message was encrypted successfully. Let's get started... You are given an HTTP web server with hostname http://ec2-54-207-102-47.sa-east-1.compute.amazonaws.com:8081 . Your goal is to perform the above steps using BASH commands, and establish a secure channel with the server. Please work in Ubuntu terminal, not from PyCharm. Below are some helpful instructions you may utilize in each step. Eventually, all your code should be written in 06_linux_ex2/tlsHandshake.sh , committed and pushed to GitHub. Use curl to send the following Client Hello HTTP request to the server: POST /clienthello { \"clientVersion\": \"3.2\", \"message\": \"Client Hello\" } POST is the request type, /clienthello is the endpoint, and the json is the body. Server Hello response will be in the form: { \"serverVersion\": \"3.2\", \"sessionID\": \"......\", \"serverCert\": \"......\" } The response is in json format. You may want to keep the sessionID in a variable called SESSION_ID for later usage, and save the server cert in a file called cert.pem . Use the command jq -r '.<key>' to parse and save specific keys from the JSON response (replace <key> by serverVersion , sessionID or serverCert according to your needs). You should use pipe ( | ) in order to pass the HTTP json response as an input to jq . Don't have jq on your Ubuntu? you know how to install it... Assuming the server certificate was stored in cert.pem file. You can verify the certificate by: openssl verify -CAfile cert-ca-aws.pem cert.pem while cert-ca-aws.pem is a file belonging to the Certificate Authority (in our case Amazon Web Services) who issued and signed the server cert. You can safely download it from https://devops-course-sep-22.s3.sa-east-1.amazonaws.com/ex2/cert-ca-aws.pem (wget...) Upon a valid certificate validation, the following output will be printed to stdout: cert.pem: OK In your tlsHandshake.sh file, use this snippet to exit the program if the certificate validation failed. Make sure you understand the code. VERIFICATION_RESULT=$( openssl verify -CAfile cert-ca-aws.pem cert.pem ) if [ \"$VERIFICATION_RESULT\" != \"cert.pem: OK\" ]; then echo \"Server Certificate is invalid.\" exit 1 fi Given a valid cert, generate a 32 random bytes string and save it to masterKey.txt text file. Got tired? refresh yourself with some interesting reading This line can help you encrypt the generated master-key secret with the server certificate: openssl smime -encrypt -aes-256-cbc -in masterKey.txt -outform DER cert.pem | base64 -w 0 Now, curl again an HTTP POST request to the server endpoint /keyexchange , with the following body POST /keyexchange { \"sessionID\": \"'$SESSION_ID'\", \"masterKey\": \"'$MASTER_KEY'\", \"sampleMessage\": \"Hi server, please encrypt me and send to client!\" } Note that $SESSION_ID is a BASH variable containing the session ID you've got from the server's hello response, you need to create this variable once you have the sessions ID from the server. Also, $MASTER_KEY is your encrypted master key, again, you need to create this variable. The response for the above request would be in the form: { \"sessionID\": \".....\", \"encryptedSampleMessage\": \".....\" } All you have to do now is to decrypt the sample message and verify that it's equal to the original sample message. This will indicate that the server uses successfully the master key. Please note that the encryptedSampleMessage is encoded in base64, before you decrypt it, encode it to binary, as following: # the content of encryptedSampleMessage is stored in a file called encSampleMsg.txt cat encSampleMsg.txt | base64 -d > encSampleMsgReady.txt # file encSampleMsgReady.txt is ready now to be used in \"openssl enc....\" command Recall the demo in 01_encryption directory in our shared repo to see how to decrypt a message. Again, you should exit the program upon an invalid decryption. Do it by: if [ \"$DECRYPTED_SAMPLE_MESSAGE\" != \"Hi server, please encrypt me and send to client!\" ]; then echo \"Server symmetric encryption using the exchanged master-key has failed.\" exit 1 else echo \"Client-Server TLS handshake has been completed successfully\" fi Well Done! you've manually implemented a secure communication over HTTP :-) In real life we have TLS that does so for us, and it's quite similar to what you've done. Processes handling 20-25 points Write your answers in the 06_linux_ex2/README file. (Q1) A user started a process and logged out from the terminal. Which command he used if the process still running in the background: nokill nohup nofg bg (Q2) The kill command always terminates a process. True False (Q3) Which command could be used to know how many processes are running in the background terminal session? process jobs work list (Q4) Given a terminal session with long process running in it, how will you ask this process to terminate? CTRL+z CTRL+c CTRL+l CTRL+c twice (Q5) Given a terminal session with long process running in it, how will you ask this process the stop? CTRL+z CTRL+c CTRL+l CTRL+c twice (Q6) How would you run the sleep 10 command as a foreground process? fg sleep 10 sleep 10 & foreground sleep 10 sleep 10 Given the following output (Q7) Which of the following command would deliver a SIGTERM to the xscreensaver process? kill TERM xscreensaver kill 4846 kill xscreensaver kill -9 4846 None of the above (Q8) Which of the following would deliver a SIGKILL to the xscreensaver command? kill -9 4846 kill xscreensaver kill -KILL xscreensaver kill -15 4846 None of the above (Q9) Which of the following would send a SIGCHLD (signal number 17) to the ssh-agent process? kill -CHLD ssh-agent kill -17 ssh-agent kill -CHLD 4828 All of the above A and C only (Q10) Which key pressed within the top command allows the user to send a signal to a process? s z t k None of the above (Q11 - easy 5 points bonus) Open a new terminal session and type the command python . Then send a SIGINT signal using your keyboard. What best describes how the python process responds to the SIGINT signal? (you can exit this process by typing exit() in the python console) The program ignores the SIGINT signal. The program has implemented a custom signal handler for the SIGINT signal. The program implements the kernel default signal handler for the SIGINT signal, which is to terminate the process. The program implements the kernel default signal handler for the SIGINT signal, which is to stop (suspend) the process. None of the above Process states 20 points Generally speaking, in Linux system, two different processes cannot write to the same file concurrently (exactly at the same moment). Each process needs to obtain an exclusive write lock for the file. That implies that all the other processes who willing to write to this file will have to wait while one process is writing to it. The more I/O intensive processes you have, the longer the wait time. In this question we will create processes which are competing on the same resource (same file), and see how some of them are changing their state from Running to Waiting. Use nano to create the following script, store it as ~/write_to_file_sequentially.sh , and make it executable. #!/bin/bash for i in $(seq 1000); do echo \"hello world\" > overloaded_file done This script writes the string \"hello world\" to a file called \"overloaded_file\". It does so 1000 times sequentially , and so will never be competing for access the file. Because we need multiple processes competing over the same resource, create the following script as well: #!/bin/bash for i in $(seq 1000); do ./write_to_file_sequentially.sh & done Name it ~/multi_process_file_writing.sh . Make sure you understand what this script does. In another terminal, run top . In a one more separate terminal, be ready to run the command ps aux . To summarize: Terminal 1 will be running multi_process_file_writing.sh . Terminal 2 will be running top Terminal 3 will take a snapshot of ps aux Now that everything is ready, run ./multi_process_file_writing.sh and observe the terminal running the top command. While you see the multi_process_file_writing process in top, take the snapshot. From ps man page , read what each process state code means. Explore ps aux output and copy to the README 5 lines maximum which indicating that some processes are waiting (sleeping due to IO operation), and some are running. While you'll find many processes in a waiting state, it may be hard to catch a process in a running state... try to execute ps aux again until you'll fine one. You may also find ps aux | grep \" R \" useful. Good Luck Don't hesitate to ask any questions","title":"Linux ex-2"},{"location":"linux_ex2/#linux-ex-2","text":"Due date: 30/11/2022 23:59 Max possible points: 135 points","title":"Linux ex-2"},{"location":"linux_ex2/#preliminaries","text":"Open our shared git repo in PyCharm and pull the repository in branch main to get an up-to-date version Create your own git branch for this exercise according to linux_ex2/< alias > (e.g. linux_ex2/ronhad).","title":"Preliminaries"},{"location":"linux_ex2/#questions","text":"","title":"Questions"},{"location":"linux_ex2/#tls-communication","text":"90 points As you know, the communication in HTTP protocol is insecure, and since Eve is listening on the channel between you (Alice) and the web server (Bob), you are required to create a secure channel. This is exactly what SSL/TLS does. The process of establishing a secure SSL/TLS connection involves several steps. SSL/TLS security protocols use a combination of asymmetric and symmetric encryption:","title":"TLS communication"},{"location":"linux_ex2/#step-1-client-hello-client-server","text":"First, the client sends a Client Hello to the server.","title":"Step 1 - Client Hello (Client -&gt; Server)."},{"location":"linux_ex2/#step-2-server-hello-server-client","text":"The server replies with a Server Hello . A Server Hello includes the following information: Server Version - the TLS version the server uses Session ID - it is used to resume the current communication session between the server and the client Server digital certificate - the certificate contains some details about the server, as well as a public key with which the client can encrypt messages to the server. The certificate itself is signed by Certificate Authority (CA).","title":"Step 2 - Server Hello (Server -&gt; Client)"},{"location":"linux_ex2/#step-3-server-certificate-verification","text":"As seen above, Eve is \"sitting\" on the channel between Alice and Bob. So what's stopping her from impersonating Bob, and once Alice sends Client Hello , she is replied by a fake Server Hello message with \"certificate\" issued by Eve itself. In such case, Alice would believe that the certificate belongs to Bob, encrypt messages to Bob using the certificate, without knowing that Eve could decrypt the messages. Here the CA comes into the picture. CA is an entity (e.g. Amazon Web Services, Microsoft etc...) trusted by both sides (client and server) that issues and signs digital certificates, so the ownership of a public key can be easily verified. In this step the client verifies the server's digital certificate.","title":"Step 3 - Server Certificate Verification"},{"location":"linux_ex2/#step-4-client-server-master-key-exchange","text":"Cert was verified successfully? great we can move on... Now, the client and the server should agree on a symmetric key (called master key ) with which they will communicate during the session. The client generates a 32-bytes random master-key, encrypts it using the server's certificate and sends the encrypted message in the channel. In addition to the encrypted master-key, the client sends a sample message to verify that the symmetric key encryption works.","title":"Step 4 - Client-Server master-key exchange"},{"location":"linux_ex2/#step-5-server-verification-message","text":"The server decrypts the encrypted master-key. From now on, every message between both sides will be symmetrically encrypted by the master-key. The server encrypts the sample message and sends it to the client.","title":"Step 5 - Server verification message"},{"location":"linux_ex2/#step-6-client-verification-message","text":"The Client verifies that the sample message was encrypted successfully.","title":"Step 6 - Client verification message"},{"location":"linux_ex2/#lets-get-started","text":"You are given an HTTP web server with hostname http://ec2-54-207-102-47.sa-east-1.compute.amazonaws.com:8081 . Your goal is to perform the above steps using BASH commands, and establish a secure channel with the server. Please work in Ubuntu terminal, not from PyCharm. Below are some helpful instructions you may utilize in each step. Eventually, all your code should be written in 06_linux_ex2/tlsHandshake.sh , committed and pushed to GitHub. Use curl to send the following Client Hello HTTP request to the server: POST /clienthello { \"clientVersion\": \"3.2\", \"message\": \"Client Hello\" } POST is the request type, /clienthello is the endpoint, and the json is the body. Server Hello response will be in the form: { \"serverVersion\": \"3.2\", \"sessionID\": \"......\", \"serverCert\": \"......\" } The response is in json format. You may want to keep the sessionID in a variable called SESSION_ID for later usage, and save the server cert in a file called cert.pem . Use the command jq -r '.<key>' to parse and save specific keys from the JSON response (replace <key> by serverVersion , sessionID or serverCert according to your needs). You should use pipe ( | ) in order to pass the HTTP json response as an input to jq . Don't have jq on your Ubuntu? you know how to install it... Assuming the server certificate was stored in cert.pem file. You can verify the certificate by: openssl verify -CAfile cert-ca-aws.pem cert.pem while cert-ca-aws.pem is a file belonging to the Certificate Authority (in our case Amazon Web Services) who issued and signed the server cert. You can safely download it from https://devops-course-sep-22.s3.sa-east-1.amazonaws.com/ex2/cert-ca-aws.pem (wget...) Upon a valid certificate validation, the following output will be printed to stdout: cert.pem: OK In your tlsHandshake.sh file, use this snippet to exit the program if the certificate validation failed. Make sure you understand the code. VERIFICATION_RESULT=$( openssl verify -CAfile cert-ca-aws.pem cert.pem ) if [ \"$VERIFICATION_RESULT\" != \"cert.pem: OK\" ]; then echo \"Server Certificate is invalid.\" exit 1 fi Given a valid cert, generate a 32 random bytes string and save it to masterKey.txt text file. Got tired? refresh yourself with some interesting reading This line can help you encrypt the generated master-key secret with the server certificate: openssl smime -encrypt -aes-256-cbc -in masterKey.txt -outform DER cert.pem | base64 -w 0 Now, curl again an HTTP POST request to the server endpoint /keyexchange , with the following body POST /keyexchange { \"sessionID\": \"'$SESSION_ID'\", \"masterKey\": \"'$MASTER_KEY'\", \"sampleMessage\": \"Hi server, please encrypt me and send to client!\" } Note that $SESSION_ID is a BASH variable containing the session ID you've got from the server's hello response, you need to create this variable once you have the sessions ID from the server. Also, $MASTER_KEY is your encrypted master key, again, you need to create this variable. The response for the above request would be in the form: { \"sessionID\": \".....\", \"encryptedSampleMessage\": \".....\" } All you have to do now is to decrypt the sample message and verify that it's equal to the original sample message. This will indicate that the server uses successfully the master key. Please note that the encryptedSampleMessage is encoded in base64, before you decrypt it, encode it to binary, as following: # the content of encryptedSampleMessage is stored in a file called encSampleMsg.txt cat encSampleMsg.txt | base64 -d > encSampleMsgReady.txt # file encSampleMsgReady.txt is ready now to be used in \"openssl enc....\" command Recall the demo in 01_encryption directory in our shared repo to see how to decrypt a message. Again, you should exit the program upon an invalid decryption. Do it by: if [ \"$DECRYPTED_SAMPLE_MESSAGE\" != \"Hi server, please encrypt me and send to client!\" ]; then echo \"Server symmetric encryption using the exchanged master-key has failed.\" exit 1 else echo \"Client-Server TLS handshake has been completed successfully\" fi Well Done! you've manually implemented a secure communication over HTTP :-) In real life we have TLS that does so for us, and it's quite similar to what you've done.","title":"Let's get started..."},{"location":"linux_ex2/#processes-handling","text":"20-25 points Write your answers in the 06_linux_ex2/README file. (Q1) A user started a process and logged out from the terminal. Which command he used if the process still running in the background: nokill nohup nofg bg (Q2) The kill command always terminates a process. True False (Q3) Which command could be used to know how many processes are running in the background terminal session? process jobs work list (Q4) Given a terminal session with long process running in it, how will you ask this process to terminate? CTRL+z CTRL+c CTRL+l CTRL+c twice (Q5) Given a terminal session with long process running in it, how will you ask this process the stop? CTRL+z CTRL+c CTRL+l CTRL+c twice (Q6) How would you run the sleep 10 command as a foreground process? fg sleep 10 sleep 10 & foreground sleep 10 sleep 10 Given the following output (Q7) Which of the following command would deliver a SIGTERM to the xscreensaver process? kill TERM xscreensaver kill 4846 kill xscreensaver kill -9 4846 None of the above (Q8) Which of the following would deliver a SIGKILL to the xscreensaver command? kill -9 4846 kill xscreensaver kill -KILL xscreensaver kill -15 4846 None of the above (Q9) Which of the following would send a SIGCHLD (signal number 17) to the ssh-agent process? kill -CHLD ssh-agent kill -17 ssh-agent kill -CHLD 4828 All of the above A and C only (Q10) Which key pressed within the top command allows the user to send a signal to a process? s z t k None of the above (Q11 - easy 5 points bonus) Open a new terminal session and type the command python . Then send a SIGINT signal using your keyboard. What best describes how the python process responds to the SIGINT signal? (you can exit this process by typing exit() in the python console) The program ignores the SIGINT signal. The program has implemented a custom signal handler for the SIGINT signal. The program implements the kernel default signal handler for the SIGINT signal, which is to terminate the process. The program implements the kernel default signal handler for the SIGINT signal, which is to stop (suspend) the process. None of the above","title":"Processes handling"},{"location":"linux_ex2/#process-states","text":"20 points Generally speaking, in Linux system, two different processes cannot write to the same file concurrently (exactly at the same moment). Each process needs to obtain an exclusive write lock for the file. That implies that all the other processes who willing to write to this file will have to wait while one process is writing to it. The more I/O intensive processes you have, the longer the wait time. In this question we will create processes which are competing on the same resource (same file), and see how some of them are changing their state from Running to Waiting. Use nano to create the following script, store it as ~/write_to_file_sequentially.sh , and make it executable. #!/bin/bash for i in $(seq 1000); do echo \"hello world\" > overloaded_file done This script writes the string \"hello world\" to a file called \"overloaded_file\". It does so 1000 times sequentially , and so will never be competing for access the file. Because we need multiple processes competing over the same resource, create the following script as well: #!/bin/bash for i in $(seq 1000); do ./write_to_file_sequentially.sh & done Name it ~/multi_process_file_writing.sh . Make sure you understand what this script does. In another terminal, run top . In a one more separate terminal, be ready to run the command ps aux . To summarize: Terminal 1 will be running multi_process_file_writing.sh . Terminal 2 will be running top Terminal 3 will take a snapshot of ps aux Now that everything is ready, run ./multi_process_file_writing.sh and observe the terminal running the top command. While you see the multi_process_file_writing process in top, take the snapshot. From ps man page , read what each process state code means. Explore ps aux output and copy to the README 5 lines maximum which indicating that some processes are waiting (sleeping due to IO operation), and some are running. While you'll find many processes in a waiting state, it may be hard to catch a process in a running state... try to execute ps aux again until you'll fine one. You may also find ps aux | grep \" R \" useful.","title":"Process states"},{"location":"linux_ex2/#good-luck","text":"Don't hesitate to ask any questions","title":"Good Luck"},{"location":"python_ex1/","text":"Poly YouTube Telegram Bot Due date: 20/02/2023 23:59 Can be done in pairs! Background Your goal in this exercise is to design and develop Telegram bot which will serve YouTube content. Part 1 - Create the environment Fork The PolyBot repo (learn about forking a repo in GitHub) Clone your forked repo locally into PyCharm (Git -> Clone...) Create Python venv for the project Install requirements by pip install -r requirements.txt Part 2 - Create a Telegram Bot Download and install telegram desktop (you can use your phone app as well). Once installed, follow this section to create a bot. You should follow until \u201cGenerating an authentication token\u201d (not including that section) Better instruction At this point, you should have your own bot, as well as the API token. Never commit sensitive data like secrets in Git repo. For now, save the token in a file called .telegramToken and add this file to .gitignore to exclude it completely from Git index. We will later learn that the place to store sensitive data is the cloud (AWS in our case). Part 3 - Running a simple \u201cecho\u201d Bot The class Bot Under bot.py you are given a class called Bot . This class handles a simple telegram bot, as follows: The constructor __init__ gets token arg which is the bot token you have just received from Telegram. Inside the constructor, an Updater object is created, and the function self._message_handler is set as main msg handler, this function is getting called whenever a new message will be sent to the bot. The default behaviour of Bot class is to \u201cecho\u201d the incoming messages. Run the program and send a message to the bot via Telegram app, observe the response and get an idea of how _message_handler is functioning (it's recommended to run in debug mode with breakpoints). Part 4 - Extending the echo bot The class QuoteBot In bot.py you are given a class called QuoteBot which inherits from Bot . Upon incoming messages, this bot echoing the message while quoting the original message, unless the user is asking politely not to quote. Run this bot and check its behavior. Part 5 - Build your YouTube Bot The class YoutubeBot In bot.py you are given a class called YoutubeBot which inherits from Bot . Upon incoming messages, this class will take the message text, search and download corresponding Youtube video(s), the bot will then send the video file to the user. Inside YoutubeBot class, override _message_handler method and implement the functionality that is needed to download video from youtube and send it to the user (utilize search_download_youtube_video in utils.py ). Remember that by inheriting the Bot class, you can use all of its methods (such as send_video or send_text). (Optional) Feel free to add more functionality e.g. implement a logic that caches videos that have already been downloaded, such that it will use the local copy when user requests the same video again. Part 6 - Containerize your app In your root directory of you repo, open Dockerfile and fill out the file such that the Bot app can be run as a Docker container Build and run the container locally, make sure it works well. Part 7 - Run your app \"as a service\" in an Amazon EC2 instance In the course AWS account, create an Amazon Linux free tier EC2 instance. Connect to the VM using SSH Install docker engine in it Get your code there by git clone... (install git on the VM if needed). Build you app with Docker ( docker build -t ... ) Run your container \"as a service\", which means (1) in the background, and (2) the container will start running automatically after reboot. (Hint: read about --detach and --restart options) You must validate that everything is running correctly! Communicate with your bot and check the response, reboot your machine and validate that the bot is up and running after. Submission guidelines Add the below public key to ~/.ssh/authorized_keys file in your VM (in a separate line), so course staff will be able to connect and see your work. You don't need to keep the VM running. When your work is done, Stop the machine (don't Terminate it!) In your forked repo, in SUBMISSION file, write your mails , the Instance id and region of your EC2 instance. Don't forget to commit and push it so it is visible to course stuff: student1@gmail.com student2@gmail.com Instance: i-09bfad1e9a92275f9 region: eu-north-1 No need to send your forked repo link since GitHub is automatically monitoring who forked the repo. Course public RSA key ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC8uOWjEcG0wFKSYbgEv/rDS6vyu1oZNfS7AWX35I0ozoNSJXEYiGW8Kw9VYE7TIEDCzBag61DbQyTDVlQpYVCw7uzDMTrgOAGQQIm8USOyFm2STRCeMa1sKivlDYynXhhtMS5k3e0a9Bo0hCbFRvVqjpixG/g/6wVA+vFjeWTo5bKjh9ekoSd3wdOu22PR6GjT0+NK5xlqhjKCnl19BFiIRptqcUkFuCgXqktrcwix0Cq2QhaQvYfIv/VA68OaClCX8wPDNXbO2VHK4170Kg5ubTrqx4ppP7Q0Gasz8CUCSGhf+njmhj3TnqhZ2UFsohyTIH4xV7e7wtNxDxdJ/r+T DevOpsCourseStuff Good Luck Don't hesitate to ask any questions","title":"Poly YouTube Telegram Bot"},{"location":"python_ex1/#poly-youtube-telegram-bot","text":"Due date: 20/02/2023 23:59 Can be done in pairs!","title":"Poly YouTube Telegram Bot"},{"location":"python_ex1/#background","text":"Your goal in this exercise is to design and develop Telegram bot which will serve YouTube content.","title":"Background"},{"location":"python_ex1/#part-1-create-the-environment","text":"Fork The PolyBot repo (learn about forking a repo in GitHub) Clone your forked repo locally into PyCharm (Git -> Clone...) Create Python venv for the project Install requirements by pip install -r requirements.txt","title":"Part 1 - Create the environment"},{"location":"python_ex1/#part-2-create-a-telegram-bot","text":"Download and install telegram desktop (you can use your phone app as well). Once installed, follow this section to create a bot. You should follow until \u201cGenerating an authentication token\u201d (not including that section) Better instruction At this point, you should have your own bot, as well as the API token. Never commit sensitive data like secrets in Git repo. For now, save the token in a file called .telegramToken and add this file to .gitignore to exclude it completely from Git index. We will later learn that the place to store sensitive data is the cloud (AWS in our case).","title":"Part 2 - Create a Telegram Bot"},{"location":"python_ex1/#part-3-running-a-simple-echo-bot","text":"","title":"Part 3 - Running a simple \u201cecho\u201d Bot"},{"location":"python_ex1/#the-class-bot","text":"Under bot.py you are given a class called Bot . This class handles a simple telegram bot, as follows: The constructor __init__ gets token arg which is the bot token you have just received from Telegram. Inside the constructor, an Updater object is created, and the function self._message_handler is set as main msg handler, this function is getting called whenever a new message will be sent to the bot. The default behaviour of Bot class is to \u201cecho\u201d the incoming messages. Run the program and send a message to the bot via Telegram app, observe the response and get an idea of how _message_handler is functioning (it's recommended to run in debug mode with breakpoints).","title":"The class Bot"},{"location":"python_ex1/#part-4-extending-the-echo-bot","text":"","title":"Part 4 - Extending the echo bot"},{"location":"python_ex1/#the-class-quotebot","text":"In bot.py you are given a class called QuoteBot which inherits from Bot . Upon incoming messages, this bot echoing the message while quoting the original message, unless the user is asking politely not to quote. Run this bot and check its behavior.","title":"The class QuoteBot"},{"location":"python_ex1/#part-5-build-your-youtube-bot","text":"","title":"Part 5 - Build your YouTube Bot"},{"location":"python_ex1/#the-class-youtubebot","text":"In bot.py you are given a class called YoutubeBot which inherits from Bot . Upon incoming messages, this class will take the message text, search and download corresponding Youtube video(s), the bot will then send the video file to the user. Inside YoutubeBot class, override _message_handler method and implement the functionality that is needed to download video from youtube and send it to the user (utilize search_download_youtube_video in utils.py ). Remember that by inheriting the Bot class, you can use all of its methods (such as send_video or send_text). (Optional) Feel free to add more functionality e.g. implement a logic that caches videos that have already been downloaded, such that it will use the local copy when user requests the same video again.","title":"The class YoutubeBot"},{"location":"python_ex1/#part-6-containerize-your-app","text":"In your root directory of you repo, open Dockerfile and fill out the file such that the Bot app can be run as a Docker container Build and run the container locally, make sure it works well.","title":"Part 6 - Containerize your app"},{"location":"python_ex1/#part-7-run-your-app-as-a-service-in-an-amazon-ec2-instance","text":"In the course AWS account, create an Amazon Linux free tier EC2 instance. Connect to the VM using SSH Install docker engine in it Get your code there by git clone... (install git on the VM if needed). Build you app with Docker ( docker build -t ... ) Run your container \"as a service\", which means (1) in the background, and (2) the container will start running automatically after reboot. (Hint: read about --detach and --restart options) You must validate that everything is running correctly! Communicate with your bot and check the response, reboot your machine and validate that the bot is up and running after.","title":"Part 7 - Run your app \"as a service\" in an Amazon EC2 instance"},{"location":"python_ex1/#submission-guidelines","text":"Add the below public key to ~/.ssh/authorized_keys file in your VM (in a separate line), so course staff will be able to connect and see your work. You don't need to keep the VM running. When your work is done, Stop the machine (don't Terminate it!) In your forked repo, in SUBMISSION file, write your mails , the Instance id and region of your EC2 instance. Don't forget to commit and push it so it is visible to course stuff: student1@gmail.com student2@gmail.com Instance: i-09bfad1e9a92275f9 region: eu-north-1 No need to send your forked repo link since GitHub is automatically monitoring who forked the repo.","title":"Submission guidelines"},{"location":"python_ex1/#course-public-rsa-key","text":"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC8uOWjEcG0wFKSYbgEv/rDS6vyu1oZNfS7AWX35I0ozoNSJXEYiGW8Kw9VYE7TIEDCzBag61DbQyTDVlQpYVCw7uzDMTrgOAGQQIm8USOyFm2STRCeMa1sKivlDYynXhhtMS5k3e0a9Bo0hCbFRvVqjpixG/g/6wVA+vFjeWTo5bKjh9ekoSd3wdOu22PR6GjT0+NK5xlqhjKCnl19BFiIRptqcUkFuCgXqktrcwix0Cq2QhaQvYfIv/VA68OaClCX8wPDNXbO2VHK4170Kg5ubTrqx4ppP7Q0Gasz8CUCSGhf+njmhj3TnqhZ2UFsohyTIH4xV7e7wtNxDxdJ/r+T DevOpsCourseStuff","title":"Course public RSA key"},{"location":"python_ex1/#good-luck","text":"Don't hesitate to ask any questions","title":"Good Luck"}]}